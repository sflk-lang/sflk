
np
x < 8 +2 /2 *3 -(2*3+1)
ev x
np np
if x
th dh {pr "h" nl}
el np
dh {if x th dh {pr "h" nl}}
lp
wh x
bd dh {pr x x < x-1}
sp pr ", "
nl
x < 2
do {
	x < 3
	if x-3 el dh {pr "h" nl}
}
if x-2 el dh {pr "h" nl}
uwu < "owo"
pr uwu nl
pr 4 > {v < v + 4} nl
ri {v < 0}
pr "yes" nl
do {pr "no" nl}
replace < "jej"
ri {pr replace nl}
do {pr "not jej"}
uwu < () ,"a" ,"b" ,"c"
x < 0 lp wh x -3 bd dh {pr uwu .x x < x +1} sp pr ", " nl
pr "o" + "k" nl
if "hh" - "hh" th pr "no" el pr "yes" nl
ri {pr "\e[33m" pr v.1 pr "\e[39m" nl} do {pr "h"}
ri () do {pr "normal" nl}
not < {if v th v < 0 el v < 1}
pr 3 >not pr ", " pr 0 >not nl
streq < {v < v.0 - (v.1) >{v<1-v}}
pr (), "heh", "heh" >streq pr ", " pr (), "heh", "xxx" >streq nl
ri {
	streq < {v < v.0 - (v.1) >{v<1-v}}
	if (), (v.0), "print" >streq
	th em (), (v.0), ("\e[33m" + (v.1) + "\e[39m") rs v
	el em v rs v
}
do {pr "h" nl}
semicolons < {
	streq < {v < v.0 - (v.1) >{v<1-v}}
	if (), (v.0), "newline" >streq
	th dh {pr ";" em v rs v}
	el em v rs v
}
ri semicolons
do {pr "int x" nl}
ri ()
double < {v < v + v}
pr 4 > double pr ", " pr "h" > double nl
quad < double > double # Can't do that in Rust huh #
pr 4 > quad pr ", " pr "h" > quad nl
triple < {v < v * 3}
pr 4 > triple pr ", " pr "h" > triple nl
neuf < triple > double
pr 4 > neuf pr ", " pr "h" > neuf nl
pr "hhh" / "h" nl
pr "hah" / "h" nl
if 0 el pr "h" th pr "no" el pr "ey" el nl th nl
em "print",, "hey\n"
dh "pr \"owo\" nl"
ri semicolons do "pr \"int y\" nl" ri ()
fun < "v < \"v < \\\"np\\\" \" + v"
lp wh fun>{pr v nl}-"np" bd fun < fun > fun
pr ((8)) nl
dh fi "sflk-lang/std.sflk"
ev "jej" >prnl
ri {
	type < v .0
	if type -"readfile" el dh {
		v < "fun < {v < v +3}"
	} th dh {
		em v rs v
	}
}
do {
	dh fi "some_file.sflk"
	pr 5 >fun nl
}
x < "<uncomment the line below to have to type stuff>\n"
# x < in #
pr "u typed: " pr x
x < 0 lp bd pr x sp pr ", " bd x < x +1 wh x -8 nl
lp wh 0 ao bd pr "h" bd nl
$
